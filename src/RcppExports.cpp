// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ibm_closed_sir_rcpp
NumericMatrix ibm_closed_sir_rcpp(double sigma, double beta, int N, int i0, int t_final, double dt);
RcppExport SEXP _siR_ibm_closed_sir_rcpp(SEXP sigmaSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP i0SEXP, SEXP t_finalSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type i0(i0SEXP);
    Rcpp::traits::input_parameter< int >::type t_final(t_finalSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(ibm_closed_sir_rcpp(sigma, beta, N, i0, t_final, dt));
    return rcpp_result_gen;
END_RCPP
}
// seq_rcpp2
std::vector<double> seq_rcpp2(const int& tf, const double& dt);
RcppExport SEXP _siR_seq_rcpp2(SEXP tfSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type tf(tfSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_rcpp2(tf, dt));
    return rcpp_result_gen;
END_RCPP
}
// ibm_closed_sir_rcpp2
List ibm_closed_sir_rcpp2(const double sigma, const double beta, const int N, const int i0, const int t_final, const double dt);
RcppExport SEXP _siR_ibm_closed_sir_rcpp2(SEXP sigmaSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP i0SEXP, SEXP t_finalSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type i0(i0SEXP);
    Rcpp::traits::input_parameter< const int >::type t_final(t_finalSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(ibm_closed_sir_rcpp2(sigma, beta, N, i0, t_final, dt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_siR_ibm_closed_sir_rcpp", (DL_FUNC) &_siR_ibm_closed_sir_rcpp, 6},
    {"_siR_seq_rcpp2", (DL_FUNC) &_siR_seq_rcpp2, 2},
    {"_siR_ibm_closed_sir_rcpp2", (DL_FUNC) &_siR_ibm_closed_sir_rcpp2, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_siR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
