// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// demog_test
void demog_test(int N, std::vector<double> agedist, std::vector<double> time);
RcppExport SEXP _siR_demog_test(SEXP NSEXP, SEXP agedistSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type agedist(agedistSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type time(timeSEXP);
    demog_test(N, agedist, time);
    return R_NilValue;
END_RCPP
}
// weighted_sample
double weighted_sample(std::vector<double>& weights);
RcppExport SEXP _siR_weighted_sample(SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_sample(weights));
    return rcpp_result_gen;
END_RCPP
}
// seq_cpp
std::vector<double> seq_cpp(double from, double to, double by);
RcppExport SEXP _siR_seq_cpp(SEXP fromSEXP, SEXP toSEXP, SEXP bySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< double >::type by(bySEXP);
    rcpp_result_gen = Rcpp::wrap(seq_cpp(from, to, by));
    return rcpp_result_gen;
END_RCPP
}
// ibm_closed_sir_rcpp
Rcpp::List ibm_closed_sir_rcpp(double sigma, double beta, int N, int i0, int t_final, double dt);
RcppExport SEXP _siR_ibm_closed_sir_rcpp(SEXP sigmaSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP i0SEXP, SEXP t_finalSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type i0(i0SEXP);
    Rcpp::traits::input_parameter< int >::type t_final(t_finalSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(ibm_closed_sir_rcpp(sigma, beta, N, i0, t_final, dt));
    return rcpp_result_gen;
END_RCPP
}
// ibm_het
Rcpp::List ibm_het(double sigma, double beta, int N, int i0, Rcpp::NumericVector times, double dt, bool het);
RcppExport SEXP _siR_ibm_het(SEXP sigmaSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP i0SEXP, SEXP timesSEXP, SEXP dtSEXP, SEXP hetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type i0(i0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type het(hetSEXP);
    rcpp_result_gen = Rcpp::wrap(ibm_het(sigma, beta, N, i0, times, dt, het));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_siR_demog_test", (DL_FUNC) &_siR_demog_test, 3},
    {"_siR_weighted_sample", (DL_FUNC) &_siR_weighted_sample, 1},
    {"_siR_seq_cpp", (DL_FUNC) &_siR_seq_cpp, 3},
    {"_siR_ibm_closed_sir_rcpp", (DL_FUNC) &_siR_ibm_closed_sir_rcpp, 6},
    {"_siR_ibm_het", (DL_FUNC) &_siR_ibm_het, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_siR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
